/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/mediasoup-client@3.6.34/lib/ortc.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,r,t,a){void 0===a&&(a=t),Object.defineProperty(e,a,{enumerable:!0,get:function(){return r[t]}})}:function(e,r,t,a){void 0===a&&(a=t),e[a]=r[t]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)"default"!==t&&Object.hasOwnProperty.call(e,t)&&__createBinding(r,e,t);return __setModuleDefault(r,e),r};Object.defineProperty(exports,"__esModule",{value:!0}),exports.canReceive=exports.canSend=exports.generateProbatorRtpParameters=exports.reduceCodecs=exports.getSendingRemoteRtpParameters=exports.getSendingRtpParameters=exports.getRecvRtpCapabilities=exports.getExtendedRtpCapabilities=exports.validateSctpStreamParameters=exports.validateSctpParameters=exports.validateNumSctpStreams=exports.validateSctpCapabilities=exports.validateRtcpParameters=exports.validateRtpEncodingParameters=exports.validateRtpHeaderExtensionParameters=exports.validateRtpCodecParameters=exports.validateRtpParameters=exports.validateRtpHeaderExtension=exports.validateRtcpFeedback=exports.validateRtpCodecCapability=exports.validateRtpCapabilities=void 0;const h264=__importStar(require("h264-profile-level-id")),utils=__importStar(require("./utils")),RTP_PROBATOR_MID="probator",RTP_PROBATOR_SSRC=1234,RTP_PROBATOR_CODEC_PAYLOAD_TYPE=127;function validateRtpCapabilities(e){if("object"!=typeof e)throw new TypeError("caps is not an object");if(e.codecs&&!Array.isArray(e.codecs))throw new TypeError("caps.codecs is not an array");e.codecs||(e.codecs=[]);for(const r of e.codecs)validateRtpCodecCapability(r);if(e.headerExtensions&&!Array.isArray(e.headerExtensions))throw new TypeError("caps.headerExtensions is not an array");e.headerExtensions||(e.headerExtensions=[]);for(const r of e.headerExtensions)validateRtpHeaderExtension(r)}function validateRtpCodecCapability(e){const r=new RegExp("^(audio|video)/(.+)","i");if("object"!=typeof e)throw new TypeError("codec is not an object");if(!e.mimeType||"string"!=typeof e.mimeType)throw new TypeError("missing codec.mimeType");const t=r.exec(e.mimeType);if(!t)throw new TypeError("invalid codec.mimeType");if(e.kind=t[1].toLowerCase(),e.preferredPayloadType&&"number"!=typeof e.preferredPayloadType)throw new TypeError("invalid codec.preferredPayloadType");if("number"!=typeof e.clockRate)throw new TypeError("missing codec.clockRate");"audio"===e.kind?"number"!=typeof e.channels&&(e.channels=1):delete e.channels,e.parameters&&"object"==typeof e.parameters||(e.parameters={});for(const r of Object.keys(e.parameters)){let t=e.parameters[r];if(void 0===t&&(e.parameters[r]="",t=""),"string"!=typeof t&&"number"!=typeof t)throw new TypeError(`invalid codec parameter [key:${r}s, value:${t}]`);if("apt"===r&&"number"!=typeof t)throw new TypeError("invalid codec apt parameter")}e.rtcpFeedback&&Array.isArray(e.rtcpFeedback)||(e.rtcpFeedback=[]);for(const r of e.rtcpFeedback)validateRtcpFeedback(r)}function validateRtcpFeedback(e){if("object"!=typeof e)throw new TypeError("fb is not an object");if(!e.type||"string"!=typeof e.type)throw new TypeError("missing fb.type");e.parameter&&"string"==typeof e.parameter||(e.parameter="")}function validateRtpHeaderExtension(e){if("object"!=typeof e)throw new TypeError("ext is not an object");if("audio"!==e.kind&&"video"!==e.kind)throw new TypeError("invalid ext.kind");if(!e.uri||"string"!=typeof e.uri)throw new TypeError("missing ext.uri");if("number"!=typeof e.preferredId)throw new TypeError("missing ext.preferredId");if(e.preferredEncrypt&&"boolean"!=typeof e.preferredEncrypt)throw new TypeError("invalid ext.preferredEncrypt");if(e.preferredEncrypt||(e.preferredEncrypt=!1),e.direction&&"string"!=typeof e.direction)throw new TypeError("invalid ext.direction");e.direction||(e.direction="sendrecv")}function validateRtpParameters(e){if("object"!=typeof e)throw new TypeError("params is not an object");if(e.mid&&"string"!=typeof e.mid)throw new TypeError("params.mid is not a string");if(!Array.isArray(e.codecs))throw new TypeError("missing params.codecs");for(const r of e.codecs)validateRtpCodecParameters(r);if(e.headerExtensions&&!Array.isArray(e.headerExtensions))throw new TypeError("params.headerExtensions is not an array");e.headerExtensions||(e.headerExtensions=[]);for(const r of e.headerExtensions)validateRtpHeaderExtensionParameters(r);if(e.encodings&&!Array.isArray(e.encodings))throw new TypeError("params.encodings is not an array");e.encodings||(e.encodings=[]);for(const r of e.encodings)validateRtpEncodingParameters(r);if(e.rtcp&&"object"!=typeof e.rtcp)throw new TypeError("params.rtcp is not an object");e.rtcp||(e.rtcp={}),validateRtcpParameters(e.rtcp)}function validateRtpCodecParameters(e){const r=new RegExp("^(audio|video)/(.+)","i");if("object"!=typeof e)throw new TypeError("codec is not an object");if(!e.mimeType||"string"!=typeof e.mimeType)throw new TypeError("missing codec.mimeType");const t=r.exec(e.mimeType);if(!t)throw new TypeError("invalid codec.mimeType");if("number"!=typeof e.payloadType)throw new TypeError("missing codec.payloadType");if("number"!=typeof e.clockRate)throw new TypeError("missing codec.clockRate");"audio"===t[1].toLowerCase()?"number"!=typeof e.channels&&(e.channels=1):delete e.channels,e.parameters&&"object"==typeof e.parameters||(e.parameters={});for(const r of Object.keys(e.parameters)){let t=e.parameters[r];if(void 0===t&&(e.parameters[r]="",t=""),"string"!=typeof t&&"number"!=typeof t)throw new TypeError(`invalid codec parameter [key:${r}s, value:${t}]`);if("apt"===r&&"number"!=typeof t)throw new TypeError("invalid codec apt parameter")}e.rtcpFeedback&&Array.isArray(e.rtcpFeedback)||(e.rtcpFeedback=[]);for(const r of e.rtcpFeedback)validateRtcpFeedback(r)}function validateRtpHeaderExtensionParameters(e){if("object"!=typeof e)throw new TypeError("ext is not an object");if(!e.uri||"string"!=typeof e.uri)throw new TypeError("missing ext.uri");if("number"!=typeof e.id)throw new TypeError("missing ext.id");if(e.encrypt&&"boolean"!=typeof e.encrypt)throw new TypeError("invalid ext.encrypt");e.encrypt||(e.encrypt=!1),e.parameters&&"object"==typeof e.parameters||(e.parameters={});for(const r of Object.keys(e.parameters)){let t=e.parameters[r];if(void 0===t&&(e.parameters[r]="",t=""),"string"!=typeof t&&"number"!=typeof t)throw new TypeError("invalid header extension parameter")}}function validateRtpEncodingParameters(e){if("object"!=typeof e)throw new TypeError("encoding is not an object");if(e.ssrc&&"number"!=typeof e.ssrc)throw new TypeError("invalid encoding.ssrc");if(e.rid&&"string"!=typeof e.rid)throw new TypeError("invalid encoding.rid");if(e.rtx&&"object"!=typeof e.rtx)throw new TypeError("invalid encoding.rtx");if(e.rtx&&"number"!=typeof e.rtx.ssrc)throw new TypeError("missing encoding.rtx.ssrc");if(e.dtx&&"boolean"==typeof e.dtx||(e.dtx=!1),e.scalabilityMode&&"string"!=typeof e.scalabilityMode)throw new TypeError("invalid encoding.scalabilityMode")}function validateRtcpParameters(e){if("object"!=typeof e)throw new TypeError("rtcp is not an object");if(e.cname&&"string"!=typeof e.cname)throw new TypeError("invalid rtcp.cname");e.reducedSize&&"boolean"==typeof e.reducedSize||(e.reducedSize=!0)}function validateSctpCapabilities(e){if("object"!=typeof e)throw new TypeError("caps is not an object");if(!e.numStreams||"object"!=typeof e.numStreams)throw new TypeError("missing caps.numStreams");validateNumSctpStreams(e.numStreams)}function validateNumSctpStreams(e){if("object"!=typeof e)throw new TypeError("numStreams is not an object");if("number"!=typeof e.OS)throw new TypeError("missing numStreams.OS");if("number"!=typeof e.MIS)throw new TypeError("missing numStreams.MIS")}function validateSctpParameters(e){if("object"!=typeof e)throw new TypeError("params is not an object");if("number"!=typeof e.port)throw new TypeError("missing params.port");if("number"!=typeof e.OS)throw new TypeError("missing params.OS");if("number"!=typeof e.MIS)throw new TypeError("missing params.MIS");if("number"!=typeof e.maxMessageSize)throw new TypeError("missing params.maxMessageSize")}function validateSctpStreamParameters(e){if("object"!=typeof e)throw new TypeError("params is not an object");if("number"!=typeof e.streamId)throw new TypeError("missing params.streamId");let r=!1;if("boolean"==typeof e.ordered?r=!0:e.ordered=!0,e.maxPacketLifeTime&&"number"!=typeof e.maxPacketLifeTime)throw new TypeError("invalid params.maxPacketLifeTime");if(e.maxRetransmits&&"number"!=typeof e.maxRetransmits)throw new TypeError("invalid params.maxRetransmits");if(e.maxPacketLifeTime&&e.maxRetransmits)throw new TypeError("cannot provide both maxPacketLifeTime and maxRetransmits");if(r&&e.ordered&&(e.maxPacketLifeTime||e.maxRetransmits))throw new TypeError("cannot be ordered with maxPacketLifeTime or maxRetransmits");if(r||!e.maxPacketLifeTime&&!e.maxRetransmits||(e.ordered=!1),e.label&&"string"!=typeof e.label)throw new TypeError("invalid params.label");if(e.protocol&&"string"!=typeof e.protocol)throw new TypeError("invalid params.protocol")}function getExtendedRtpCapabilities(e,r){const t={codecs:[],headerExtensions:[]};for(const a of r.codecs||[]){if(isRtxCodec(a))continue;const r=(e.codecs||[]).find((e=>matchCodecs(e,a,{strict:!0,modify:!0})));if(!r)continue;const o={mimeType:r.mimeType,kind:r.kind,clockRate:r.clockRate,channels:r.channels,localPayloadType:r.preferredPayloadType,localRtxPayloadType:void 0,remotePayloadType:a.preferredPayloadType,remoteRtxPayloadType:void 0,localParameters:r.parameters,remoteParameters:a.parameters,rtcpFeedback:reduceRtcpFeedback(r,a)};t.codecs.push(o)}for(const a of t.codecs){const t=e.codecs.find((e=>isRtxCodec(e)&&e.parameters.apt===a.localPayloadType)),o=r.codecs.find((e=>isRtxCodec(e)&&e.parameters.apt===a.remotePayloadType));t&&o&&(a.localRtxPayloadType=t.preferredPayloadType,a.remoteRtxPayloadType=o.preferredPayloadType)}for(const a of r.headerExtensions){const r=e.headerExtensions.find((e=>matchHeaderExtensions(e,a)));if(!r)continue;const o={kind:a.kind,uri:a.uri,sendId:r.preferredId,recvId:a.preferredId,encrypt:r.preferredEncrypt,direction:"sendrecv"};switch(a.direction){case"sendrecv":o.direction="sendrecv";break;case"recvonly":o.direction="sendonly";break;case"sendonly":o.direction="recvonly";break;case"inactive":o.direction="inactive"}t.headerExtensions.push(o)}return t}function getRecvRtpCapabilities(e){const r={codecs:[],headerExtensions:[]};for(const t of e.codecs){const e={mimeType:t.mimeType,kind:t.kind,preferredPayloadType:t.remotePayloadType,clockRate:t.clockRate,channels:t.channels,parameters:t.localParameters,rtcpFeedback:t.rtcpFeedback};if(r.codecs.push(e),!t.remoteRtxPayloadType)continue;const a={mimeType:t.kind+"/rtx",kind:t.kind,preferredPayloadType:t.remoteRtxPayloadType,clockRate:t.clockRate,parameters:{apt:t.remotePayloadType},rtcpFeedback:[]};r.codecs.push(a)}for(const t of e.headerExtensions){if("sendrecv"!==t.direction&&"recvonly"!==t.direction)continue;const e={kind:t.kind,uri:t.uri,preferredId:t.recvId,preferredEncrypt:t.encrypt,direction:t.direction};r.headerExtensions.push(e)}return r}function getSendingRtpParameters(e,r){const t={mid:void 0,codecs:[],headerExtensions:[],encodings:[],rtcp:{}};for(const a of r.codecs){if(a.kind!==e)continue;const r={mimeType:a.mimeType,payloadType:a.localPayloadType,clockRate:a.clockRate,channels:a.channels,parameters:a.localParameters,rtcpFeedback:a.rtcpFeedback};if(t.codecs.push(r),a.localRtxPayloadType){const e={mimeType:a.kind+"/rtx",payloadType:a.localRtxPayloadType,clockRate:a.clockRate,parameters:{apt:a.localPayloadType},rtcpFeedback:[]};t.codecs.push(e)}}for(const a of r.headerExtensions){if(a.kind&&a.kind!==e||"sendrecv"!==a.direction&&"sendonly"!==a.direction)continue;const r={uri:a.uri,id:a.sendId,encrypt:a.encrypt,parameters:{}};t.headerExtensions.push(r)}return t}function getSendingRemoteRtpParameters(e,r){const t={mid:void 0,codecs:[],headerExtensions:[],encodings:[],rtcp:{}};for(const a of r.codecs){if(a.kind!==e)continue;const r={mimeType:a.mimeType,payloadType:a.localPayloadType,clockRate:a.clockRate,channels:a.channels,parameters:a.remoteParameters,rtcpFeedback:a.rtcpFeedback};if(t.codecs.push(r),a.localRtxPayloadType){const e={mimeType:a.kind+"/rtx",payloadType:a.localRtxPayloadType,clockRate:a.clockRate,parameters:{apt:a.localPayloadType},rtcpFeedback:[]};t.codecs.push(e)}}for(const a of r.headerExtensions){if(a.kind&&a.kind!==e||"sendrecv"!==a.direction&&"sendonly"!==a.direction)continue;const r={uri:a.uri,id:a.sendId,encrypt:a.encrypt,parameters:{}};t.headerExtensions.push(r)}if(t.headerExtensions.some((e=>"http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01"===e.uri)))for(const e of t.codecs)e.rtcpFeedback=(e.rtcpFeedback||[]).filter((e=>"goog-remb"!==e.type));else if(t.headerExtensions.some((e=>"http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time"===e.uri)))for(const e of t.codecs)e.rtcpFeedback=(e.rtcpFeedback||[]).filter((e=>"transport-cc"!==e.type));else for(const e of t.codecs)e.rtcpFeedback=(e.rtcpFeedback||[]).filter((e=>"transport-cc"!==e.type&&"goog-remb"!==e.type));return t}function reduceCodecs(e,r){const t=[];if(r){for(let a=0;a<e.length;++a)if(matchCodecs(e[a],r)){t.push(e[a]),isRtxCodec(e[a+1])&&t.push(e[a+1]);break}if(0===t.length)throw new TypeError("no matching codec found")}else t.push(e[0]),isRtxCodec(e[1])&&t.push(e[1]);return t}function generateProbatorRtpParameters(e){validateRtpParameters(e=utils.clone(e,{}));const r={mid:"probator",codecs:[],headerExtensions:[],encodings:[{ssrc:1234}],rtcp:{cname:"probator"}};return r.codecs.push(e.codecs[0]),r.codecs[0].payloadType=127,r.headerExtensions=e.headerExtensions,r}function canSend(e,r){return r.codecs.some((r=>r.kind===e))}function canReceive(e,r){if(validateRtpParameters(e),0===e.codecs.length)return!1;const t=e.codecs[0];return r.codecs.some((e=>e.remotePayloadType===t.payloadType))}function isRtxCodec(e){return!!e&&/.+\/rtx$/i.test(e.mimeType)}function matchCodecs(e,r,{strict:t=!1,modify:a=!1}={}){const o=e.mimeType.toLowerCase();if(o!==r.mimeType.toLowerCase())return!1;if(e.clockRate!==r.clockRate)return!1;if(e.channels!==r.channels)return!1;switch(o){case"video/h264":if((e.parameters["packetization-mode"]||0)!==(r.parameters["packetization-mode"]||0))return!1;if(t){if(!h264.isSameProfile(e.parameters,r.parameters))return!1;let t;try{t=h264.generateProfileLevelIdForAnswer(e.parameters,r.parameters)}catch(e){return!1}a&&(t?(e.parameters["profile-level-id"]=t,r.parameters["profile-level-id"]=t):(delete e.parameters["profile-level-id"],delete r.parameters["profile-level-id"]))}break;case"video/vp9":if(t){if((e.parameters["profile-id"]||0)!==(r.parameters["profile-id"]||0))return!1}}return!0}function matchHeaderExtensions(e,r){return(!e.kind||!r.kind||e.kind===r.kind)&&e.uri===r.uri}function reduceRtcpFeedback(e,r){const t=[];for(const a of e.rtcpFeedback||[]){const e=(r.rtcpFeedback||[]).find((e=>e.type===a.type&&(e.parameter===a.parameter||!e.parameter&&!a.parameter)));e&&t.push(e)}return t}exports.validateRtpCapabilities=validateRtpCapabilities,exports.validateRtpCodecCapability=validateRtpCodecCapability,exports.validateRtcpFeedback=validateRtcpFeedback,exports.validateRtpHeaderExtension=validateRtpHeaderExtension,exports.validateRtpParameters=validateRtpParameters,exports.validateRtpCodecParameters=validateRtpCodecParameters,exports.validateRtpHeaderExtensionParameters=validateRtpHeaderExtensionParameters,exports.validateRtpEncodingParameters=validateRtpEncodingParameters,exports.validateRtcpParameters=validateRtcpParameters,exports.validateSctpCapabilities=validateSctpCapabilities,exports.validateNumSctpStreams=validateNumSctpStreams,exports.validateSctpParameters=validateSctpParameters,exports.validateSctpStreamParameters=validateSctpStreamParameters,exports.getExtendedRtpCapabilities=getExtendedRtpCapabilities,exports.getRecvRtpCapabilities=getRecvRtpCapabilities,exports.getSendingRtpParameters=getSendingRtpParameters,exports.getSendingRemoteRtpParameters=getSendingRemoteRtpParameters,exports.reduceCodecs=reduceCodecs,exports.generateProbatorRtpParameters=generateProbatorRtpParameters,exports.canSend=canSend,exports.canReceive=canReceive;
//# sourceMappingURL=/sm/8282d6efd03388e4329011d15b10cc0e14048c50ff60ecab83ca2ed93c5cb2f0.map