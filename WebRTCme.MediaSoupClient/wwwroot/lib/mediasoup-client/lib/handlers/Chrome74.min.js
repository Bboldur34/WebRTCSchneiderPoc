/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/mediasoup-client@3.6.34/lib/handlers/Chrome74.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,s,r){void 0===r&&(r=s),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[s]}})}:function(e,t,s,r){void 0===r&&(r=s),e[r]=t[s]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)"default"!==s&&Object.hasOwnProperty.call(e,s)&&__createBinding(t,e,s);return __setModuleDefault(t,e),t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.Chrome74=void 0;const sdpTransform=__importStar(require("sdp-transform")),Logger_1=require("../Logger"),utils=__importStar(require("../utils")),ortc=__importStar(require("../ortc")),sdpCommonUtils=__importStar(require("./sdp/commonUtils")),sdpUnifiedPlanUtils=__importStar(require("./sdp/unifiedPlanUtils")),HandlerInterface_1=require("./HandlerInterface"),RemoteSdp_1=require("./sdp/RemoteSdp"),scalabilityModes_1=require("../scalabilityModes"),logger=new Logger_1.Logger("Chrome74"),SCTP_NUM_STREAMS={OS:1024,MIS:1024};class Chrome74 extends HandlerInterface_1.HandlerInterface{constructor(){super(),this._mapMidTransceiver=new Map,this._sendStream=new MediaStream,this._hasDataChannelMediaSection=!1,this._nextSendSctpStreamId=0,this._transportReady=!1}static createFactory(){return()=>new Chrome74}get name(){return"Chrome74"}close(){if(logger.debug("close()"),this._pc)try{this._pc.close()}catch(e){}}async getNativeRtpCapabilities(){logger.debug("getNativeRtpCapabilities()");const e=new RTCPeerConnection({iceServers:[],iceTransportPolicy:"all",bundlePolicy:"max-bundle",rtcpMuxPolicy:"require",sdpSemantics:"unified-plan"});try{e.addTransceiver("audio"),e.addTransceiver("video");const t=await e.createOffer();try{e.close()}catch(e){}const s=sdpTransform.parse(t.sdp);return sdpCommonUtils.extractRtpCapabilities({sdpObject:s})}catch(t){try{e.close()}catch(e){}throw t}}async getNativeSctpCapabilities(){return logger.debug("getNativeSctpCapabilities()"),{numStreams:SCTP_NUM_STREAMS}}run({direction:e,iceParameters:t,iceCandidates:s,dtlsParameters:r,sctpParameters:i,iceServers:a,iceTransportPolicy:n,additionalSettings:c,proprietaryConstraints:o,extendedRtpCapabilities:d}){logger.debug("run()"),this._direction=e,this._remoteSdp=new RemoteSdp_1.RemoteSdp({iceParameters:t,iceCandidates:s,dtlsParameters:r,sctpParameters:i}),this._sendingRtpParametersByKind={audio:ortc.getSendingRtpParameters("audio",d),video:ortc.getSendingRtpParameters("video",d)},this._sendingRemoteRtpParametersByKind={audio:ortc.getSendingRemoteRtpParameters("audio",d),video:ortc.getSendingRemoteRtpParameters("video",d)},this._pc=new RTCPeerConnection(Object.assign({iceServers:a||[],iceTransportPolicy:n||"all",bundlePolicy:"max-bundle",rtcpMuxPolicy:"require",sdpSemantics:"unified-plan"},c),o),this._pc.addEventListener("iceconnectionstatechange",(()=>{switch(this._pc.iceConnectionState){case"checking":this.emit("@connectionstatechange","connecting");break;case"connected":case"completed":this.emit("@connectionstatechange","connected");break;case"failed":this.emit("@connectionstatechange","failed");break;case"disconnected":this.emit("@connectionstatechange","disconnected");break;case"closed":this.emit("@connectionstatechange","closed")}}))}async updateIceServers(e){logger.debug("updateIceServers()");const t=this._pc.getConfiguration();t.iceServers=e,this._pc.setConfiguration(t)}async restartIce(e){if(logger.debug("restartIce()"),this._remoteSdp.updateIceParameters(e),this._transportReady)if("send"===this._direction){const e=await this._pc.createOffer({iceRestart:!0});logger.debug("restartIce() | calling pc.setLocalDescription() [offer:%o]",e),await this._pc.setLocalDescription(e);const t={type:"answer",sdp:this._remoteSdp.getSdp()};logger.debug("restartIce() | calling pc.setRemoteDescription() [answer:%o]",t),await this._pc.setRemoteDescription(t)}else{const e={type:"offer",sdp:this._remoteSdp.getSdp()};logger.debug("restartIce() | calling pc.setRemoteDescription() [offer:%o]",e),await this._pc.setRemoteDescription(e);const t=await this._pc.createAnswer();logger.debug("restartIce() | calling pc.setLocalDescription() [answer:%o]",t),await this._pc.setLocalDescription(t)}}async getTransportStats(){return this._pc.getStats()}async send({track:e,encodings:t,codecOptions:s,codec:r}){this._assertSendDirection(),logger.debug("send() [kind:%s, track.id:%s]",e.kind,e.id),t&&t.length>1&&t.forEach(((e,t)=>{e.rid="r"+t}));const i=utils.clone(this._sendingRtpParametersByKind[e.kind],{});i.codecs=ortc.reduceCodecs(i.codecs,r);const a=utils.clone(this._sendingRemoteRtpParametersByKind[e.kind],{});a.codecs=ortc.reduceCodecs(a.codecs,r);const n=this._remoteSdp.getNextMediaSectionIdx(),c=this._pc.addTransceiver(e,{direction:"sendonly",streams:[this._sendStream],sendEncodings:t});let o,d=await this._pc.createOffer(),p=sdpTransform.parse(d.sdp);this._transportReady||await this._setupTransport({localDtlsRole:"server",localSdpObject:p});let l=!1;const g=scalabilityModes_1.parse((t||[{}])[0].scalabilityMode);t&&1===t.length&&g.spatialLayers>1&&"video/vp9"===i.codecs[0].mimeType.toLowerCase()&&(logger.debug("send() | enabling legacy simulcast for VP9 SVC"),l=!0,p=sdpTransform.parse(d.sdp),o=p.media[n.idx],sdpUnifiedPlanUtils.addLegacySimulcast({offerMediaObject:o,numStreams:g.spatialLayers}),d={type:"offer",sdp:sdpTransform.write(p)}),logger.debug("send() | calling pc.setLocalDescription() [offer:%o]",d),await this._pc.setLocalDescription(d);const m=c.mid;if(i.mid=m,p=sdpTransform.parse(this._pc.localDescription.sdp),o=p.media[n.idx],i.rtcp.cname=sdpCommonUtils.getCname({offerMediaObject:o}),t)if(1===t.length){let e=sdpUnifiedPlanUtils.getRtpEncodings({offerMediaObject:o});Object.assign(e[0],t[0]),l&&(e=[e[0]]),i.encodings=e}else i.encodings=t;else i.encodings=sdpUnifiedPlanUtils.getRtpEncodings({offerMediaObject:o});if(i.encodings.length>1&&("video/vp8"===i.codecs[0].mimeType.toLowerCase()||"video/h264"===i.codecs[0].mimeType.toLowerCase()))for(const e of i.encodings)e.scalabilityMode="S1T3";this._remoteSdp.send({offerMediaObject:o,reuseMid:n.reuseMid,offerRtpParameters:i,answerRtpParameters:a,codecOptions:s,extmapAllowMixed:!0});const h={type:"answer",sdp:this._remoteSdp.getSdp()};return logger.debug("send() | calling pc.setRemoteDescription() [answer:%o]",h),await this._pc.setRemoteDescription(h),this._mapMidTransceiver.set(m,c),{localId:m,rtpParameters:i,rtpSender:c.sender}}async stopSending(e){this._assertSendDirection(),logger.debug("stopSending() [localId:%s]",e);const t=this._mapMidTransceiver.get(e);if(!t)throw new Error("associated RTCRtpTransceiver not found");t.sender.replaceTrack(null),this._pc.removeTrack(t.sender),this._remoteSdp.closeMediaSection(t.mid);const s=await this._pc.createOffer();logger.debug("stopSending() | calling pc.setLocalDescription() [offer:%o]",s),await this._pc.setLocalDescription(s);const r={type:"answer",sdp:this._remoteSdp.getSdp()};logger.debug("stopSending() | calling pc.setRemoteDescription() [answer:%o]",r),await this._pc.setRemoteDescription(r)}async replaceTrack(e,t){this._assertSendDirection(),t?logger.debug("replaceTrack() [localId:%s, track.id:%s]",e,t.id):logger.debug("replaceTrack() [localId:%s, no track]",e);const s=this._mapMidTransceiver.get(e);if(!s)throw new Error("associated RTCRtpTransceiver not found");await s.sender.replaceTrack(t)}async setMaxSpatialLayer(e,t){this._assertSendDirection(),logger.debug("setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",e,t);const s=this._mapMidTransceiver.get(e);if(!s)throw new Error("associated RTCRtpTransceiver not found");const r=s.sender.getParameters();r.encodings.forEach(((e,s)=>{e.active=s<=t})),await s.sender.setParameters(r)}async setRtpEncodingParameters(e,t){this._assertSendDirection(),logger.debug("setRtpEncodingParameters() [localId:%s, params:%o]",e,t);const s=this._mapMidTransceiver.get(e);if(!s)throw new Error("associated RTCRtpTransceiver not found");const r=s.sender.getParameters();r.encodings.forEach(((e,s)=>{r.encodings[s]=Object.assign(Object.assign({},e),t)})),await s.sender.setParameters(r)}async getSenderStats(e){this._assertSendDirection();const t=this._mapMidTransceiver.get(e);if(!t)throw new Error("associated RTCRtpTransceiver not found");return t.sender.getStats()}async sendDataChannel({ordered:e,maxPacketLifeTime:t,maxRetransmits:s,label:r,protocol:i}){this._assertSendDirection();const a={negotiated:!0,id:this._nextSendSctpStreamId,ordered:e,maxPacketLifeTime:t,maxRetransmits:s,protocol:i};logger.debug("sendDataChannel() [options:%o]",a);const n=this._pc.createDataChannel(r,a);if(this._nextSendSctpStreamId=++this._nextSendSctpStreamId%SCTP_NUM_STREAMS.MIS,!this._hasDataChannelMediaSection){const e=await this._pc.createOffer(),t=sdpTransform.parse(e.sdp),s=t.media.find((e=>"application"===e.type));this._transportReady||await this._setupTransport({localDtlsRole:"server",localSdpObject:t}),logger.debug("sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",e),await this._pc.setLocalDescription(e),this._remoteSdp.sendSctpAssociation({offerMediaObject:s});const r={type:"answer",sdp:this._remoteSdp.getSdp()};logger.debug("sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",r),await this._pc.setRemoteDescription(r),this._hasDataChannelMediaSection=!0}return{dataChannel:n,sctpStreamParameters:{streamId:a.id,ordered:a.ordered,maxPacketLifeTime:a.maxPacketLifeTime,maxRetransmits:a.maxRetransmits}}}async receive({trackId:e,kind:t,rtpParameters:s}){this._assertRecvDirection(),logger.debug("receive() [trackId:%s, kind:%s]",e,t);const r=s.mid||String(this._mapMidTransceiver.size);this._remoteSdp.receive({mid:r,kind:t,offerRtpParameters:s,streamId:s.rtcp.cname,trackId:e});const i={type:"offer",sdp:this._remoteSdp.getSdp()};logger.debug("receive() | calling pc.setRemoteDescription() [offer:%o]",i),await this._pc.setRemoteDescription(i);let a=await this._pc.createAnswer();const n=sdpTransform.parse(a.sdp),c=n.media.find((e=>String(e.mid)===r));sdpCommonUtils.applyCodecParameters({offerRtpParameters:s,answerMediaObject:c}),a={type:"answer",sdp:sdpTransform.write(n)},this._transportReady||await this._setupTransport({localDtlsRole:"client",localSdpObject:n}),logger.debug("receive() | calling pc.setLocalDescription() [answer:%o]",a),await this._pc.setLocalDescription(a);const o=this._pc.getTransceivers().find((e=>e.mid===r));if(!o)throw new Error("new RTCRtpTransceiver not found");return this._mapMidTransceiver.set(r,o),{localId:r,track:o.receiver.track,rtpReceiver:o.receiver}}async stopReceiving(e){this._assertRecvDirection(),logger.debug("stopReceiving() [localId:%s]",e);const t=this._mapMidTransceiver.get(e);if(!t)throw new Error("associated RTCRtpTransceiver not found");this._remoteSdp.closeMediaSection(t.mid);const s={type:"offer",sdp:this._remoteSdp.getSdp()};logger.debug("stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",s),await this._pc.setRemoteDescription(s);const r=await this._pc.createAnswer();logger.debug("stopReceiving() | calling pc.setLocalDescription() [answer:%o]",r),await this._pc.setLocalDescription(r)}async getReceiverStats(e){this._assertRecvDirection();const t=this._mapMidTransceiver.get(e);if(!t)throw new Error("associated RTCRtpTransceiver not found");return t.receiver.getStats()}async receiveDataChannel({sctpStreamParameters:e,label:t,protocol:s}){this._assertRecvDirection();const{streamId:r,ordered:i,maxPacketLifeTime:a,maxRetransmits:n}=e,c={negotiated:!0,id:r,ordered:i,maxPacketLifeTime:a,maxRetransmits:n,protocol:s};logger.debug("receiveDataChannel() [options:%o]",c);const o=this._pc.createDataChannel(t,c);if(!this._hasDataChannelMediaSection){this._remoteSdp.receiveSctpAssociation();const e={type:"offer",sdp:this._remoteSdp.getSdp()};logger.debug("receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",e),await this._pc.setRemoteDescription(e);const t=await this._pc.createAnswer();if(!this._transportReady){const e=sdpTransform.parse(t.sdp);await this._setupTransport({localDtlsRole:"client",localSdpObject:e})}logger.debug("receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",t),await this._pc.setLocalDescription(t),this._hasDataChannelMediaSection=!0}return{dataChannel:o}}async _setupTransport({localDtlsRole:e,localSdpObject:t}){t||(t=sdpTransform.parse(this._pc.localDescription.sdp));const s=sdpCommonUtils.extractDtlsParameters({sdpObject:t});s.role=e,this._remoteSdp.updateDtlsRole("client"===e?"server":"client"),await this.safeEmitAsPromise("@connect",{dtlsParameters:s}),this._transportReady=!0}_assertSendDirection(){if("send"!==this._direction)throw new Error('method can just be called for handlers with "send" direction')}_assertRecvDirection(){if("recv"!==this._direction)throw new Error('method can just be called for handlers with "recv" direction')}}exports.Chrome74=Chrome74;
//# sourceMappingURL=/sm/d3f5b7a58cf5043ccd3e5962a46c519203c429ad0714b41c615b86407893f3a8.map