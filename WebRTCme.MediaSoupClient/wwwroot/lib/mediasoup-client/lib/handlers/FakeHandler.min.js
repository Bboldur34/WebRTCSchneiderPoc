/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/mediasoup-client@3.6.34/lib/handlers/FakeHandler.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,a,r){void 0===r&&(r=a),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[a]}})}:function(e,t,a,r){void 0===r&&(r=a),e[r]=t[a]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)"default"!==a&&Object.hasOwnProperty.call(e,a)&&__createBinding(t,e,a);return __setModuleDefault(t,e),t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.FakeHandler=void 0;const EnhancedEventEmitter_1=require("../EnhancedEventEmitter"),Logger_1=require("../Logger"),fake_mediastreamtrack_1=require("fake-mediastreamtrack"),utils=__importStar(require("../utils")),ortc=__importStar(require("../ortc")),HandlerInterface_1=require("./HandlerInterface"),logger=new Logger_1.Logger("FakeHandler");class FakeDataChannel extends EnhancedEventEmitter_1.EnhancedEventEmitter{constructor({id:e,ordered:t,maxPacketLifeTime:a,maxRetransmits:r,label:s,protocol:n}){super(),this.id=e,this.ordered=t,this.maxPacketLifeTime=a,this.maxRetransmits=r,this.label=s,this.protocol=n}close(){this.safeEmit("close")}send(e){this.safeEmit("message",e)}addEventListener(e,t){this.on(e,t)}}class FakeHandler extends HandlerInterface_1.HandlerInterface{constructor(e){super(),this._cname="CNAME-"+utils.generateRandomNumber(),this._transportReady=!1,this._nextLocalId=1,this._tracks=new Map,this._nextSctpStreamId=0,this.fakeParameters=e}static createFactory(e){return()=>new FakeHandler(e)}get name(){return"FakeHandler"}close(){logger.debug("close()")}setConnectionState(e){this.emit("@connectionstatechange",e)}async getNativeRtpCapabilities(){return logger.debug("getNativeRtpCapabilities()"),this.fakeParameters.generateNativeRtpCapabilities()}async getNativeSctpCapabilities(){return logger.debug("getNativeSctpCapabilities()"),this.fakeParameters.generateNativeSctpCapabilities()}run({direction:e,iceParameters:t,iceCandidates:a,dtlsParameters:r,sctpParameters:s,iceServers:n,iceTransportPolicy:i,proprietaryConstraints:c,extendedRtpCapabilities:o}){logger.debug("run()"),this._rtpParametersByKind={audio:ortc.getSendingRtpParameters("audio",o),video:ortc.getSendingRtpParameters("video",o)}}async updateIceServers(e){logger.debug("updateIceServers()")}async restartIce(e){logger.debug("restartIce()")}async getTransportStats(){return new Map}async send({track:e,encodings:t,codecOptions:a,codec:r}){logger.debug("send() [kind:%s, track.id:%s]",e.kind,e.id),this._transportReady||await this._setupTransport({localDtlsRole:"server"});const s=utils.clone(this._rtpParametersByKind[e.kind],{}),n=s.codecs.some((e=>/.+\/rtx$/i.test(e.mimeType)));s.mid="mid-"+utils.generateRandomNumber(),t||(t=[{}]);for(const e of t)e.ssrc=utils.generateRandomNumber(),n&&(e.rtx={ssrc:utils.generateRandomNumber()});s.encodings=t,s.rtcp={cname:this._cname,reducedSize:!0,mux:!0};const i=this._nextLocalId++;return this._tracks.set(i,e),{localId:String(i),rtpParameters:s}}async stopSending(e){if(logger.debug("stopSending() [localId:%s]",e),!this._tracks.has(Number(e)))throw new Error("local track not found");this._tracks.delete(Number(e))}async replaceTrack(e,t){t?logger.debug("replaceTrack() [localId:%s, track.id:%s]",e,t.id):logger.debug("replaceTrack() [localId:%s, no track]",e),this._tracks.delete(Number(e)),this._tracks.set(Number(e),t)}async setMaxSpatialLayer(e,t){logger.debug("setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",e,t)}async setRtpEncodingParameters(e,t){logger.debug("setRtpEncodingParameters() [localId:%s, params:%o]",e,t)}async getSenderStats(e){return new Map}async sendDataChannel({ordered:e,maxPacketLifeTime:t,maxRetransmits:a,label:r,protocol:s}){this._transportReady||await this._setupTransport({localDtlsRole:"server"}),logger.debug("sendDataChannel()");return{dataChannel:new FakeDataChannel({id:this._nextSctpStreamId++,ordered:e,maxPacketLifeTime:t,maxRetransmits:a,label:r,protocol:s}),sctpStreamParameters:{streamId:this._nextSctpStreamId,ordered:e,maxPacketLifeTime:t,maxRetransmits:a}}}async receive({trackId:e,kind:t,rtpParameters:a}){this._transportReady||await this._setupTransport({localDtlsRole:"client"}),logger.debug("receive() [trackId:%s, kind:%s]",e,t);const r=this._nextLocalId++,s=new fake_mediastreamtrack_1.FakeMediaStreamTrack({kind:t});return this._tracks.set(r,s),{localId:String(r),track:s}}async stopReceiving(e){logger.debug("stopReceiving() [localId:%s]",e),this._tracks.delete(Number(e))}async getReceiverStats(e){return new Map}async receiveDataChannel({sctpStreamParameters:e,label:t,protocol:a}){this._transportReady||await this._setupTransport({localDtlsRole:"client"}),logger.debug("receiveDataChannel()");return{dataChannel:new FakeDataChannel({id:e.streamId,ordered:e.ordered,maxPacketLifeTime:e.maxPacketLifeTime,maxRetransmits:e.maxRetransmits,label:t,protocol:a})}}async _setupTransport({localDtlsRole:e,localSdpObject:t}){const a=utils.clone(this.fakeParameters.generateLocalDtlsParameters(),{});e&&(a.role=e),this.emit("@connectionstatechange","connecting"),await new Promise(((e,t)=>this.emit("@connect",{dtlsParameters:a},e,t))),this._transportReady=!0}}exports.FakeHandler=FakeHandler;
//# sourceMappingURL=/sm/808e9e044bc3c9b625db4c5c1de3838a46b1bfdb20394fd40c6ce9b947c680c1.map