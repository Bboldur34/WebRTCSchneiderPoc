/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/mediasoup-client@3.6.34/lib/handlers/Edge11.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,r,s){void 0===s&&(s=r),Object.defineProperty(e,s,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,s){void 0===s&&(s=r),e[s]=t[r]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&__createBinding(t,e,r);return __setModuleDefault(t,e),t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.Edge11=void 0;const Logger_1=require("../Logger"),errors_1=require("../errors"),utils=__importStar(require("../utils")),ortc=__importStar(require("../ortc")),edgeUtils=__importStar(require("./ortc/edgeUtils")),HandlerInterface_1=require("./HandlerInterface"),logger=new Logger_1.Logger("Edge11");class Edge11 extends HandlerInterface_1.HandlerInterface{constructor(){super(),this._rtpSenders=new Map,this._rtpReceivers=new Map,this._nextSendLocalId=0,this._transportReady=!1}static createFactory(){return()=>new Edge11}get name(){return"Edge11"}close(){logger.debug("close()");try{this._iceGatherer.close()}catch(e){}try{this._iceTransport.stop()}catch(e){}try{this._dtlsTransport.stop()}catch(e){}for(const e of this._rtpSenders.values())try{e.stop()}catch(e){}for(const e of this._rtpReceivers.values())try{e.stop()}catch(e){}}async getNativeRtpCapabilities(){return logger.debug("getNativeRtpCapabilities()"),edgeUtils.getCapabilities()}async getNativeSctpCapabilities(){return logger.debug("getNativeSctpCapabilities()"),{numStreams:{OS:0,MIS:0}}}run({direction:e,iceParameters:t,iceCandidates:r,dtlsParameters:s,sctpParameters:a,iceServers:n,iceTransportPolicy:i,additionalSettings:o,proprietaryConstraints:c,extendedRtpCapabilities:d}){logger.debug("run()"),this._sendingRtpParametersByKind={audio:ortc.getSendingRtpParameters("audio",d),video:ortc.getSendingRtpParameters("video",d)},this._remoteIceParameters=t,this._remoteIceCandidates=r,this._remoteDtlsParameters=s,this._cname="CNAME-"+utils.generateRandomNumber(),this._setIceGatherer({iceServers:n,iceTransportPolicy:i}),this._setIceTransport(),this._setDtlsTransport()}async updateIceServers(e){throw new errors_1.UnsupportedError("not supported")}async restartIce(e){if(logger.debug("restartIce()"),this._remoteIceParameters=e,this._transportReady){logger.debug("restartIce() | calling iceTransport.start()"),this._iceTransport.start(this._iceGatherer,e,"controlling");for(const e of this._remoteIceCandidates)this._iceTransport.addRemoteCandidate(e);this._iceTransport.addRemoteCandidate({})}}async getTransportStats(){return this._iceTransport.getStats()}async send({track:e,encodings:t,codecOptions:r,codec:s}){logger.debug("send() [kind:%s, track.id:%s]",e.kind,e.id),this._transportReady||await this._setupTransport({localDtlsRole:"server"}),logger.debug("send() | calling new RTCRtpSender()");const a=new RTCRtpSender(e,this._dtlsTransport),n=utils.clone(this._sendingRtpParametersByKind[e.kind],{});n.codecs=ortc.reduceCodecs(n.codecs,s);const i=n.codecs.some((e=>/.+\/rtx$/i.test(e.mimeType)));t||(t=[{}]);for(const e of t)e.ssrc=utils.generateRandomNumber(),i&&(e.rtx={ssrc:utils.generateRandomNumber()});n.encodings=t,n.rtcp={cname:this._cname,reducedSize:!0,mux:!0};const o=edgeUtils.mangleRtpParameters(n);logger.debug("send() | calling rtpSender.send() [params:%o]",o),await a.send(o);const c=String(this._nextSendLocalId);return this._nextSendLocalId++,this._rtpSenders.set(c,a),{localId:c,rtpParameters:n,rtpSender:a}}async stopSending(e){logger.debug("stopSending() [localId:%s]",e);const t=this._rtpSenders.get(e);if(!t)throw new Error("RTCRtpSender not found");this._rtpSenders.delete(e);try{logger.debug("stopSending() | calling rtpSender.stop()"),t.stop()}catch(e){throw logger.warn("stopSending() | rtpSender.stop() failed:%o",e),e}}async replaceTrack(e,t){t?logger.debug("replaceTrack() [localId:%s, track.id:%s]",e,t.id):logger.debug("replaceTrack() [localId:%s, no track]",e);const r=this._rtpSenders.get(e);if(!r)throw new Error("RTCRtpSender not found");r.setTrack(t)}async setMaxSpatialLayer(e,t){logger.debug("setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",e,t);const r=this._rtpSenders.get(e);if(!r)throw new Error("RTCRtpSender not found");const s=r.getParameters();s.encodings.forEach(((e,r)=>{e.active=r<=t})),await r.setParameters(s)}async setRtpEncodingParameters(e,t){logger.debug("setRtpEncodingParameters() [localId:%s, params:%o]",e,t);const r=this._rtpSenders.get(e);if(!r)throw new Error("RTCRtpSender not found");const s=r.getParameters();s.encodings.forEach(((e,r)=>{s.encodings[r]=Object.assign(Object.assign({},e),t)})),await r.setParameters(s)}async getSenderStats(e){const t=this._rtpSenders.get(e);if(!t)throw new Error("RTCRtpSender not found");return t.getStats()}async sendDataChannel(e){throw new errors_1.UnsupportedError("not implemented")}async receive({trackId:e,kind:t,rtpParameters:r}){logger.debug("receive() [trackId:%s, kind:%s]",e,t),this._transportReady||await this._setupTransport({localDtlsRole:"server"}),logger.debug("receive() | calling new RTCRtpReceiver()");const s=new RTCRtpReceiver(this._dtlsTransport,t);s.addEventListener("error",(e=>{logger.error('rtpReceiver "error" event [event:%o]',e)}));const a=edgeUtils.mangleRtpParameters(r);logger.debug("receive() | calling rtpReceiver.receive() [params:%o]",a),await s.receive(a);const n=e;return this._rtpReceivers.set(n,s),{localId:n,track:s.track,rtpReceiver:s}}async stopReceiving(e){logger.debug("stopReceiving() [localId:%s]",e);const t=this._rtpReceivers.get(e);if(!t)throw new Error("RTCRtpReceiver not found");this._rtpReceivers.delete(e);try{logger.debug("stopReceiving() | calling rtpReceiver.stop()"),t.stop()}catch(e){logger.warn("stopReceiving() | rtpReceiver.stop() failed:%o",e)}}async getReceiverStats(e){const t=this._rtpReceivers.get(e);if(!t)throw new Error("RTCRtpReceiver not found");return t.getStats()}async receiveDataChannel(e){throw new errors_1.UnsupportedError("not implemented")}_setIceGatherer({iceServers:e,iceTransportPolicy:t}){const r=new RTCIceGatherer({iceServers:e||[],gatherPolicy:t||"all"});r.addEventListener("error",(e=>{logger.error('iceGatherer "error" event [event:%o]',e)}));try{r.gather()}catch(e){logger.debug("_setIceGatherer() | iceGatherer.gather() failed: %s",e.toString())}this._iceGatherer=r}_setIceTransport(){const e=new RTCIceTransport(this._iceGatherer);e.addEventListener("statechange",(()=>{switch(e.state){case"checking":this.emit("@connectionstatechange","connecting");break;case"connected":case"completed":this.emit("@connectionstatechange","connected");break;case"failed":this.emit("@connectionstatechange","failed");break;case"disconnected":this.emit("@connectionstatechange","disconnected");break;case"closed":this.emit("@connectionstatechange","closed")}})),e.addEventListener("icestatechange",(()=>{switch(e.state){case"checking":this.emit("@connectionstatechange","connecting");break;case"connected":case"completed":this.emit("@connectionstatechange","connected");break;case"failed":this.emit("@connectionstatechange","failed");break;case"disconnected":this.emit("@connectionstatechange","disconnected");break;case"closed":this.emit("@connectionstatechange","closed")}})),e.addEventListener("candidatepairchange",(e=>{logger.debug('iceTransport "candidatepairchange" event [pair:%o]',e.pair)})),this._iceTransport=e}_setDtlsTransport(){const e=new RTCDtlsTransport(this._iceTransport);e.addEventListener("statechange",(()=>{logger.debug('dtlsTransport "statechange" event [state:%s]',e.state)})),e.addEventListener("dtlsstatechange",(()=>{logger.debug('dtlsTransport "dtlsstatechange" event [state:%s]',e.state),"closed"===e.state&&this.emit("@connectionstatechange","closed")})),e.addEventListener("error",(e=>{logger.error('dtlsTransport "error" event [event:%o]',e)})),this._dtlsTransport=e}async _setupTransport({localDtlsRole:e}){logger.debug("_setupTransport()");const t=this._dtlsTransport.getLocalParameters();t.role=e,await this.safeEmitAsPromise("@connect",{dtlsParameters:t}),this._iceTransport.start(this._iceGatherer,this._remoteIceParameters,"controlling");for(const e of this._remoteIceCandidates)this._iceTransport.addRemoteCandidate(e);this._iceTransport.addRemoteCandidate({}),this._remoteDtlsParameters.fingerprints=this._remoteDtlsParameters.fingerprints.filter((e=>"sha-256"===e.algorithm||"sha-384"===e.algorithm||"sha-512"===e.algorithm)),this._dtlsTransport.start(this._remoteDtlsParameters),this._transportReady=!0}}exports.Edge11=Edge11;
//# sourceMappingURL=/sm/0b8d4985c3d5b360c023f53f34b766692d85fa55245ba61aee6b2dbddbc7895c.map