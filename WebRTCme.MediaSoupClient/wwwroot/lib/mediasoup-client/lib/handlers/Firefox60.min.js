/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/mediasoup-client@3.6.34/lib/handlers/Firefox60.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,r,s){void 0===s&&(s=r),Object.defineProperty(e,s,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,s){void 0===s&&(s=r),e[s]=t[r]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&__createBinding(t,e,r);return __setModuleDefault(t,e),t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.Firefox60=void 0;const sdpTransform=__importStar(require("sdp-transform")),Logger_1=require("../Logger"),errors_1=require("../errors"),utils=__importStar(require("../utils")),ortc=__importStar(require("../ortc")),sdpCommonUtils=__importStar(require("./sdp/commonUtils")),sdpUnifiedPlanUtils=__importStar(require("./sdp/unifiedPlanUtils")),HandlerInterface_1=require("./HandlerInterface"),RemoteSdp_1=require("./sdp/RemoteSdp"),logger=new Logger_1.Logger("Firefox60"),SCTP_NUM_STREAMS={OS:16,MIS:2048};class Firefox60 extends HandlerInterface_1.HandlerInterface{constructor(){super(),this._mapMidTransceiver=new Map,this._sendStream=new MediaStream,this._hasDataChannelMediaSection=!1,this._nextSendSctpStreamId=0,this._transportReady=!1}static createFactory(){return()=>new Firefox60}get name(){return"Firefox60"}close(){if(logger.debug("close()"),this._pc)try{this._pc.close()}catch(e){}}async getNativeRtpCapabilities(){logger.debug("getNativeRtpCapabilities()");const e=new RTCPeerConnection({iceServers:[],iceTransportPolicy:"all",bundlePolicy:"max-bundle",rtcpMuxPolicy:"require"}),t=document.createElement("canvas");t.getContext("2d");const r=t.captureStream().getVideoTracks()[0];try{e.addTransceiver("audio",{direction:"sendrecv"});const s=e.addTransceiver(r,{direction:"sendrecv"}),i=s.sender.getParameters(),a=[{rid:"r0",maxBitrate:1e5},{rid:"r1",maxBitrate:5e5}];i.encodings=a,await s.sender.setParameters(i);const n=await e.createOffer();try{t.remove()}catch(e){}try{r.stop()}catch(e){}try{e.close()}catch(e){}const c=sdpTransform.parse(n.sdp);return sdpCommonUtils.extractRtpCapabilities({sdpObject:c})}catch(s){try{t.remove()}catch(e){}try{r.stop()}catch(e){}try{e.close()}catch(e){}throw s}}async getNativeSctpCapabilities(){return logger.debug("getNativeSctpCapabilities()"),{numStreams:SCTP_NUM_STREAMS}}run({direction:e,iceParameters:t,iceCandidates:r,dtlsParameters:s,sctpParameters:i,iceServers:a,iceTransportPolicy:n,additionalSettings:c,proprietaryConstraints:o,extendedRtpCapabilities:d}){logger.debug("run()"),this._direction=e,this._remoteSdp=new RemoteSdp_1.RemoteSdp({iceParameters:t,iceCandidates:r,dtlsParameters:s,sctpParameters:i}),this._sendingRtpParametersByKind={audio:ortc.getSendingRtpParameters("audio",d),video:ortc.getSendingRtpParameters("video",d)},this._sendingRemoteRtpParametersByKind={audio:ortc.getSendingRemoteRtpParameters("audio",d),video:ortc.getSendingRemoteRtpParameters("video",d)},this._pc=new RTCPeerConnection(Object.assign({iceServers:a||[],iceTransportPolicy:n||"all",bundlePolicy:"max-bundle",rtcpMuxPolicy:"require"},c),o),this._pc.addEventListener("iceconnectionstatechange",(()=>{switch(this._pc.iceConnectionState){case"checking":this.emit("@connectionstatechange","connecting");break;case"connected":case"completed":this.emit("@connectionstatechange","connected");break;case"failed":this.emit("@connectionstatechange","failed");break;case"disconnected":this.emit("@connectionstatechange","disconnected");break;case"closed":this.emit("@connectionstatechange","closed")}}))}async updateIceServers(e){throw new errors_1.UnsupportedError("not supported")}async restartIce(e){if(logger.debug("restartIce()"),this._remoteSdp.updateIceParameters(e),this._transportReady)if("send"===this._direction){const e=await this._pc.createOffer({iceRestart:!0});logger.debug("restartIce() | calling pc.setLocalDescription() [offer:%o]",e),await this._pc.setLocalDescription(e);const t={type:"answer",sdp:this._remoteSdp.getSdp()};logger.debug("restartIce() | calling pc.setRemoteDescription() [answer:%o]",t),await this._pc.setRemoteDescription(t)}else{const e={type:"offer",sdp:this._remoteSdp.getSdp()};logger.debug("restartIce() | calling pc.setRemoteDescription() [offer:%o]",e),await this._pc.setRemoteDescription(e);const t=await this._pc.createAnswer();logger.debug("restartIce() | calling pc.setLocalDescription() [answer:%o]",t),await this._pc.setLocalDescription(t)}}async getTransportStats(){return this._pc.getStats()}async send({track:e,encodings:t,codecOptions:r,codec:s}){this._assertSendDirection(),logger.debug("send() [kind:%s, track.id:%s]",e.kind,e.id),t&&(t=utils.clone(t,[])).length>1&&(t.forEach(((e,t)=>{e.rid="r"+t})),t.reverse());const i=utils.clone(this._sendingRtpParametersByKind[e.kind],{});i.codecs=ortc.reduceCodecs(i.codecs,s);const a=utils.clone(this._sendingRemoteRtpParametersByKind[e.kind],{});a.codecs=ortc.reduceCodecs(a.codecs,s);const n=this._pc.addTransceiver(e,{direction:"sendonly",streams:[this._sendStream]});if(t){const e=n.sender.getParameters();e.encodings=t,await n.sender.setParameters(e)}const c=await this._pc.createOffer();let o=sdpTransform.parse(c.sdp);this._transportReady||await this._setupTransport({localDtlsRole:"client",localSdpObject:o}),logger.debug("send() | calling pc.setLocalDescription() [offer:%o]",c),await this._pc.setLocalDescription(c);const d=n.mid;i.mid=d,o=sdpTransform.parse(this._pc.localDescription.sdp);const p=o.media[o.media.length-1];if(i.rtcp.cname=sdpCommonUtils.getCname({offerMediaObject:p}),t)if(1===t.length){const e=sdpUnifiedPlanUtils.getRtpEncodings({offerMediaObject:p});Object.assign(e[0],t[0]),i.encodings=e}else i.encodings=t.reverse();else i.encodings=sdpUnifiedPlanUtils.getRtpEncodings({offerMediaObject:p});if(i.encodings.length>1&&("video/vp8"===i.codecs[0].mimeType.toLowerCase()||"video/h264"===i.codecs[0].mimeType.toLowerCase()))for(const e of i.encodings)e.scalabilityMode="S1T3";this._remoteSdp.send({offerMediaObject:p,offerRtpParameters:i,answerRtpParameters:a,codecOptions:r,extmapAllowMixed:!0});const l={type:"answer",sdp:this._remoteSdp.getSdp()};return logger.debug("send() | calling pc.setRemoteDescription() [answer:%o]",l),await this._pc.setRemoteDescription(l),this._mapMidTransceiver.set(d,n),{localId:d,rtpParameters:i,rtpSender:n.sender}}async stopSending(e){logger.debug("stopSending() [localId:%s]",e);const t=this._mapMidTransceiver.get(e);if(!t)throw new Error("associated transceiver not found");t.sender.replaceTrack(null),this._pc.removeTrack(t.sender),this._remoteSdp.disableMediaSection(t.mid);const r=await this._pc.createOffer();logger.debug("stopSending() | calling pc.setLocalDescription() [offer:%o]",r),await this._pc.setLocalDescription(r);const s={type:"answer",sdp:this._remoteSdp.getSdp()};logger.debug("stopSending() | calling pc.setRemoteDescription() [answer:%o]",s),await this._pc.setRemoteDescription(s)}async replaceTrack(e,t){this._assertSendDirection(),t?logger.debug("replaceTrack() [localId:%s, track.id:%s]",e,t.id):logger.debug("replaceTrack() [localId:%s, no track]",e);const r=this._mapMidTransceiver.get(e);if(!r)throw new Error("associated RTCRtpTransceiver not found");await r.sender.replaceTrack(t)}async setMaxSpatialLayer(e,t){this._assertSendDirection(),logger.debug("setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",e,t);const r=this._mapMidTransceiver.get(e);if(!r)throw new Error("associated transceiver not found");const s=r.sender.getParameters();t=s.encodings.length-1-t,s.encodings.forEach(((e,r)=>{e.active=r>=t})),await r.sender.setParameters(s)}async setRtpEncodingParameters(e,t){this._assertSendDirection(),logger.debug("setRtpEncodingParameters() [localId:%s, params:%o]",e,t);const r=this._mapMidTransceiver.get(e);if(!r)throw new Error("associated RTCRtpTransceiver not found");const s=r.sender.getParameters();s.encodings.forEach(((e,r)=>{s.encodings[r]=Object.assign(Object.assign({},e),t)})),await r.sender.setParameters(s)}async getSenderStats(e){this._assertSendDirection();const t=this._mapMidTransceiver.get(e);if(!t)throw new Error("associated RTCRtpTransceiver not found");return t.sender.getStats()}async sendDataChannel({ordered:e,maxPacketLifeTime:t,maxRetransmits:r,label:s,protocol:i}){this._assertSendDirection();const a={negotiated:!0,id:this._nextSendSctpStreamId,ordered:e,maxPacketLifeTime:t,maxRetransmits:r,protocol:i};logger.debug("sendDataChannel() [options:%o]",a);const n=this._pc.createDataChannel(s,a);if(this._nextSendSctpStreamId=++this._nextSendSctpStreamId%SCTP_NUM_STREAMS.MIS,!this._hasDataChannelMediaSection){const e=await this._pc.createOffer(),t=sdpTransform.parse(e.sdp),r=t.media.find((e=>"application"===e.type));this._transportReady||await this._setupTransport({localDtlsRole:"server",localSdpObject:t}),logger.debug("sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",e),await this._pc.setLocalDescription(e),this._remoteSdp.sendSctpAssociation({offerMediaObject:r});const s={type:"answer",sdp:this._remoteSdp.getSdp()};logger.debug("sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",s),await this._pc.setRemoteDescription(s),this._hasDataChannelMediaSection=!0}return{dataChannel:n,sctpStreamParameters:{streamId:a.id,ordered:a.ordered,maxPacketLifeTime:a.maxPacketLifeTime,maxRetransmits:a.maxRetransmits}}}async receive({trackId:e,kind:t,rtpParameters:r}){this._assertRecvDirection(),logger.debug("receive() [trackId:%s, kind:%s]",e,t);const s=r.mid||String(this._mapMidTransceiver.size);this._remoteSdp.receive({mid:s,kind:t,offerRtpParameters:r,streamId:r.rtcp.cname,trackId:e});const i={type:"offer",sdp:this._remoteSdp.getSdp()};logger.debug("receive() | calling pc.setRemoteDescription() [offer:%o]",i),await this._pc.setRemoteDescription(i);let a=await this._pc.createAnswer();const n=sdpTransform.parse(a.sdp),c=n.media.find((e=>String(e.mid)===s));sdpCommonUtils.applyCodecParameters({offerRtpParameters:r,answerMediaObject:c}),a={type:"answer",sdp:sdpTransform.write(n)},this._transportReady||await this._setupTransport({localDtlsRole:"client",localSdpObject:n}),logger.debug("receive() | calling pc.setLocalDescription() [answer:%o]",a),await this._pc.setLocalDescription(a);const o=this._pc.getTransceivers().find((e=>e.mid===s));if(!o)throw new Error("new RTCRtpTransceiver not found");return this._mapMidTransceiver.set(s,o),{localId:s,track:o.receiver.track,rtpReceiver:o.receiver}}async stopReceiving(e){this._assertRecvDirection(),logger.debug("stopReceiving() [localId:%s]",e);const t=this._mapMidTransceiver.get(e);if(!t)throw new Error("associated RTCRtpTransceiver not found");this._remoteSdp.closeMediaSection(t.mid);const r={type:"offer",sdp:this._remoteSdp.getSdp()};logger.debug("stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",r),await this._pc.setRemoteDescription(r);const s=await this._pc.createAnswer();logger.debug("stopReceiving() | calling pc.setLocalDescription() [answer:%o]",s),await this._pc.setLocalDescription(s)}async getReceiverStats(e){this._assertRecvDirection();const t=this._mapMidTransceiver.get(e);if(!t)throw new Error("associated RTCRtpTransceiver not found");return t.receiver.getStats()}async receiveDataChannel({sctpStreamParameters:e,label:t,protocol:r}){this._assertRecvDirection();const{streamId:s,ordered:i,maxPacketLifeTime:a,maxRetransmits:n}=e,c={negotiated:!0,id:s,ordered:i,maxPacketLifeTime:a,maxRetransmits:n,protocol:r};logger.debug("receiveDataChannel() [options:%o]",c);const o=this._pc.createDataChannel(t,c);if(!this._hasDataChannelMediaSection){this._remoteSdp.receiveSctpAssociation();const e={type:"offer",sdp:this._remoteSdp.getSdp()};logger.debug("receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",e),await this._pc.setRemoteDescription(e);const t=await this._pc.createAnswer();if(!this._transportReady){const e=sdpTransform.parse(t.sdp);await this._setupTransport({localDtlsRole:"client",localSdpObject:e})}logger.debug("receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",t),await this._pc.setLocalDescription(t),this._hasDataChannelMediaSection=!0}return{dataChannel:o}}async _setupTransport({localDtlsRole:e,localSdpObject:t}){t||(t=sdpTransform.parse(this._pc.localDescription.sdp));const r=sdpCommonUtils.extractDtlsParameters({sdpObject:t});r.role=e,this._remoteSdp.updateDtlsRole("client"===e?"server":"client"),await this.safeEmitAsPromise("@connect",{dtlsParameters:r}),this._transportReady=!0}_assertSendDirection(){if("send"!==this._direction)throw new Error('method can just be called for handlers with "send" direction')}_assertRecvDirection(){if("recv"!==this._direction)throw new Error('method can just be called for handlers with "recv" direction')}}exports.Firefox60=Firefox60;
//# sourceMappingURL=/sm/5ebef3f99ea9d422c46dee8cfaed8a017e8ba0e9213fc8be334ad4e1799256b7.map